const path = require('path');
const webpack = require('webpack');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const { CleanWebpackPlugin } = require('clean-webpack-plugin');

module.exports = {
  mode: 'development',
  // Here the application starts executing and webpack starts bundling
  entry: {
    app: path.join(process.cwd(), 'src/index.js'),
  },

  // Options related to how webpack emits results
  output: {
    // The target directory for all output files must be an absolute path
    // path: path.resolve(__dirname, 'public/dist'),
    // The filename template for entry chunks
    filename: '[name].js',
  },

  optimization: {
    // Tell webpack to minimize the bundle using the UglifyjsWebpackPlugin.
    minimize: false,
    // npm packages are added to the vendor code separately in splitChunks below
    splitChunks: {
      cacheGroups: {
        common: {
          chunks: 'all',
          filename: 'js/[name].js',
          name: 'common',
          test: /[\\/]node_modules[\\/]/,
        },
      },
    },
  },

  module: {
    rules: [
      {
        // Allows transpiling JavaScript files using Babel and webpack.
        test: /\.(js|jsx)$/,
        // Exclude these folders from testing
        exclude: /node_modules/,
        use: {
          loader: 'babel-loader',
          options: {
            presets: [
              [
                '@babel/preset-env',
                {
                  targets: {
                    browsers: ['last 3 versions'],
                  },
                },
              ],
              // Transforms JSX
              '@babel/preset-react',
            ],
          },
        },
      },
      {
        test: /\.(eot|otf|ttf|woff|woff2)$/,
        loader: 'file-loader',
        options: {
          name: '[name].[ext]',
          outputPath: 'fonts/',
          publicPath: path.join(process.cwd(), 'dist/fonts'),
        },
      },

      {
        test: /\.(png|gif|jpe?g|svg)$/,
        loader: 'file-loader',
        options: {
          name: '[name].[ext]',
          outputPath: 'img/',
          publicPath: path.join(process.cwd(), 'dist/img'),
        },
      },
    ],
  },

  plugins: [
    // Expose NODE_ENV to webpack, in order to use `process.env.NODE_ENV`
    // inside your code for any environment checks
    new webpack.EnvironmentPlugin({
      NODE_ENV: 'development',
    }),

    // Allows modules to be updated at runtime without the need for a full refresh
    new webpack.HotModuleReplacementPlugin(),

    // Simplifies creation of HTML files to serve webpack bundles.
    new HtmlWebpackPlugin({
      inject: true, // Inject all files generated by webpack
      template: 'src/index.html',
    }),

    // All files inside webpack's output.path directory will be removed once, but the
    // directory itself will not be
    new CleanWebpackPlugin(),

    // Makes it easier to see which dependencies are being patched
    new webpack.NamedModulesPlugin(),
  ],

  // Options for resolving module requests
  // (does not apply to resolving to loaders)
  resolve: {
    extensions: ['.js', '.json', '.jsx', '.css'],
  },
};
